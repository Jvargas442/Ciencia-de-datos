{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOGBcBv12Gr5BRufMfIrpvC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jvargas442/Ciencia-de-datos/blob/main/Ciencia%20de%20datos%3A%20Medidas%20centrales\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "akmKtIL0k8Vd"
      },
      "outputs": [],
      "source": [
        "!pip install statsmodels"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install wquantiles"
      ],
      "metadata": {
        "id": "mbGDnAH5lLph"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.stats import trim_mean\n",
        "import wquantiles\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "CPwBYVWwlZ-I"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "estado=pd.read_csv(\"/content/state.csv\")"
      ],
      "metadata": {
        "id": "meQvM47OleCI"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Ver los primeros 5 registros\n",
        "estado.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "8y5On6L0lg7A",
        "outputId": "568fd3d0-4d14-4e85-f842-126cb125ddd4"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        State  Population  Murder.Rate Abbreviation\n",
              "0     Alabama     4779736          5.7           AL\n",
              "1      Alaska      710231          5.6           AK\n",
              "2     Arizona     6392017          4.7           AZ\n",
              "3    Arkansas     2915918          5.6           AR\n",
              "4  California    37253956          4.4           CA"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a6a9bbb8-54f7-4d2f-bdef-a1b83660b5fc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Population</th>\n",
              "      <th>Murder.Rate</th>\n",
              "      <th>Abbreviation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Alabama</td>\n",
              "      <td>4779736</td>\n",
              "      <td>5.7</td>\n",
              "      <td>AL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alaska</td>\n",
              "      <td>710231</td>\n",
              "      <td>5.6</td>\n",
              "      <td>AK</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Arizona</td>\n",
              "      <td>6392017</td>\n",
              "      <td>4.7</td>\n",
              "      <td>AZ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Arkansas</td>\n",
              "      <td>2915918</td>\n",
              "      <td>5.6</td>\n",
              "      <td>AR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>California</td>\n",
              "      <td>37253956</td>\n",
              "      <td>4.4</td>\n",
              "      <td>CA</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6a9bbb8-54f7-4d2f-bdef-a1b83660b5fc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a6a9bbb8-54f7-4d2f-bdef-a1b83660b5fc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a6a9bbb8-54f7-4d2f-bdef-a1b83660b5fc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6b80bc7b-e86f-477d-8933-f17c0203e1b6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b80bc7b-e86f-477d-8933-f17c0203e1b6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6b80bc7b-e86f-477d-8933-f17c0203e1b6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "estado",
              "summary": "{\n  \"name\": \"estado\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"Indiana\",\n          \"South Carolina\",\n          \"New Mexico\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6848235,\n        \"min\": 563626,\n        \"max\": 37253956,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          6483802,\n          4625364,\n          2059179\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Murder.Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.915736124302923,\n        \"min\": 0.9,\n        \"max\": 10.3,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          1.6,\n          6.6,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abbreviation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"IN\",\n          \"SC\",\n          \"NM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Ver los últimos 4 registros\n",
        "estado.tail(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "N2Uy7PSjlslo",
        "outputId": "ce438491-0b03-44bd-d801-474412c56bbc"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            State  Population  Murder.Rate Abbreviation\n",
              "46     Washington     6724540          2.5           WA\n",
              "47  West Virginia     1852994          4.0           WV\n",
              "48      Wisconsin     5686986          2.9           WI\n",
              "49        Wyoming      563626          2.7           WY"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c9a481c3-a7ea-4fc4-b87f-f8e58e511f2f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Population</th>\n",
              "      <th>Murder.Rate</th>\n",
              "      <th>Abbreviation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>Washington</td>\n",
              "      <td>6724540</td>\n",
              "      <td>2.5</td>\n",
              "      <td>WA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>West Virginia</td>\n",
              "      <td>1852994</td>\n",
              "      <td>4.0</td>\n",
              "      <td>WV</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>Wisconsin</td>\n",
              "      <td>5686986</td>\n",
              "      <td>2.9</td>\n",
              "      <td>WI</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>Wyoming</td>\n",
              "      <td>563626</td>\n",
              "      <td>2.7</td>\n",
              "      <td>WY</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9a481c3-a7ea-4fc4-b87f-f8e58e511f2f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c9a481c3-a7ea-4fc4-b87f-f8e58e511f2f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c9a481c3-a7ea-4fc4-b87f-f8e58e511f2f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aae023d6-0b14-450c-9fba-039ee419551f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aae023d6-0b14-450c-9fba-039ee419551f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aae023d6-0b14-450c-9fba-039ee419551f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"estado\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"West Virginia\",\n          \"Wyoming\",\n          \"Washington\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2963333,\n        \"min\": 563626,\n        \"max\": 6724540,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1852994,\n          563626,\n          6724540\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Murder.Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6701989754294366,\n        \"min\": 2.5,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4.0,\n          2.7,\n          2.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abbreviation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"WV\",\n          \"WY\",\n          \"WA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Ver un muestreo de 10 registros(aleatorios)\n",
        "estado.sample(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "_IWVs761lvlY",
        "outputId": "fa93584c-39ff-469c-caaa-19390c753ece"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             State  Population  Murder.Rate Abbreviation\n",
              "21        Michigan     9883640          5.4           MI\n",
              "17       Louisiana     4533372         10.3           LA\n",
              "8          Florida    18801310          5.8           FL\n",
              "45        Virginia     8001024          4.1           VA\n",
              "5         Colorado     5029196          2.8           CO\n",
              "46      Washington     6724540          2.5           WA\n",
              "16        Kentucky     4339367          3.6           KY\n",
              "39  South Carolina     4625364          6.4           SC\n",
              "32  North Carolina     9535483          5.1           NC\n",
              "2          Arizona     6392017          4.7           AZ"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7f24c90b-d55e-4e8c-ae93-f45f0a2026f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Population</th>\n",
              "      <th>Murder.Rate</th>\n",
              "      <th>Abbreviation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Michigan</td>\n",
              "      <td>9883640</td>\n",
              "      <td>5.4</td>\n",
              "      <td>MI</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Louisiana</td>\n",
              "      <td>4533372</td>\n",
              "      <td>10.3</td>\n",
              "      <td>LA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Florida</td>\n",
              "      <td>18801310</td>\n",
              "      <td>5.8</td>\n",
              "      <td>FL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Virginia</td>\n",
              "      <td>8001024</td>\n",
              "      <td>4.1</td>\n",
              "      <td>VA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Colorado</td>\n",
              "      <td>5029196</td>\n",
              "      <td>2.8</td>\n",
              "      <td>CO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>Washington</td>\n",
              "      <td>6724540</td>\n",
              "      <td>2.5</td>\n",
              "      <td>WA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Kentucky</td>\n",
              "      <td>4339367</td>\n",
              "      <td>3.6</td>\n",
              "      <td>KY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>South Carolina</td>\n",
              "      <td>4625364</td>\n",
              "      <td>6.4</td>\n",
              "      <td>SC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>North Carolina</td>\n",
              "      <td>9535483</td>\n",
              "      <td>5.1</td>\n",
              "      <td>NC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Arizona</td>\n",
              "      <td>6392017</td>\n",
              "      <td>4.7</td>\n",
              "      <td>AZ</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f24c90b-d55e-4e8c-ae93-f45f0a2026f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7f24c90b-d55e-4e8c-ae93-f45f0a2026f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7f24c90b-d55e-4e8c-ae93-f45f0a2026f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3199fdcb-109c-44ef-a96e-2e3e53aa95af\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3199fdcb-109c-44ef-a96e-2e3e53aa95af')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3199fdcb-109c-44ef-a96e-2e3e53aa95af button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"estado\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"North Carolina\",\n          \"Louisiana\",\n          \"Washington\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4371147,\n        \"min\": 4339367,\n        \"max\": 18801310,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          9535483,\n          4533372,\n          6724540\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Murder.Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2301220694043735,\n        \"min\": 2.5,\n        \"max\": 10.3,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5.1,\n          10.3,\n          2.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abbreviation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"NC\",\n          \"LA\",\n          \"WA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "estado.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C-HfhOPelzV_",
        "outputId": "4d5d05c5-e62c-4629-ff7d-a98124b1e09f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['State', 'Population', 'Murder.Rate', 'Abbreviation'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list(estado.columns) #Convertit en lista los nombres de las columnas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "loBz56Tdl25P",
        "outputId": "b80e0ae0-3585-4bdc-c1bf-6288bc3deaa8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['State', 'Population', 'Murder.Rate', 'Abbreviation']"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "estado.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HeEcDw9mmAff",
        "outputId": "5e36b621-613e-4655-b217-3f3afdeb2448"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 50 entries, 0 to 49\n",
            "Data columns (total 4 columns):\n",
            " #   Column        Non-Null Count  Dtype  \n",
            "---  ------        --------------  -----  \n",
            " 0   State         50 non-null     object \n",
            " 1   Population    50 non-null     int64  \n",
            " 2   Murder.Rate   50 non-null     float64\n",
            " 3   Abbreviation  50 non-null     object \n",
            "dtypes: float64(1), int64(1), object(2)\n",
            "memory usage: 1.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "estado.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "ykgD8oaFmMp3",
        "outputId": "b9849eaa-5a27-491b-8258-79198168bb38"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Population  Murder.Rate\n",
              "count  5.000000e+01    50.000000\n",
              "mean   6.162876e+06     4.066000\n",
              "std    6.848235e+06     1.915736\n",
              "min    5.636260e+05     0.900000\n",
              "25%    1.833004e+06     2.425000\n",
              "50%    4.436370e+06     4.000000\n",
              "75%    6.680312e+06     5.550000\n",
              "max    3.725396e+07    10.300000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0c667da-4704-409d-9025-41c22e5afb24\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Population</th>\n",
              "      <th>Murder.Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5.000000e+01</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6.162876e+06</td>\n",
              "      <td>4.066000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6.848235e+06</td>\n",
              "      <td>1.915736</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.636260e+05</td>\n",
              "      <td>0.900000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.833004e+06</td>\n",
              "      <td>2.425000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4.436370e+06</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.680312e+06</td>\n",
              "      <td>5.550000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>3.725396e+07</td>\n",
              "      <td>10.300000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0c667da-4704-409d-9025-41c22e5afb24')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b0c667da-4704-409d-9025-41c22e5afb24 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b0c667da-4704-409d-9025-41c22e5afb24');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-02f987ad-e80a-4910-ac38-442402f75c2b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-02f987ad-e80a-4910-ac38-442402f75c2b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-02f987ad-e80a-4910-ac38-442402f75c2b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"estado\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12143552.805767782,\n        \"min\": 50.0,\n        \"max\": 37253956.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6162876.3,\n          4436369.5,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Murder.Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.46017669001848,\n        \"min\": 0.9,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.066,\n          4.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###2. 1 Estimando las tasas de población y asesianatos"
      ],
      "metadata": {
        "id": "d06QaEb0mmc2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "estado[\"Population\"].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gR6sH9ZPmuqf",
        "outputId": "6ce1dbb6-c22e-46c4-803e-9fadc0cf8f2d"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6162876.3"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "trim_mean(estado.Population, 0.1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AlL8ya97m8He",
        "outputId": "8296175a-1388-4b71-e4c2-a30d3897b1c5"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4783697.125"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.average(estado[\"Murder.Rate\"], weights=estado.Population)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TrMRtF4Hn4V9",
        "outputId": "8c4be95f-9726-4c53-984a-f410c46898e2"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.445833981123393"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "estado[\"Murder.Rate\"].plot.line()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "_qQGHsUZo-JB",
        "outputId": "334c3643-2e5a-46ec-d15b-622e55a5c0f1"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "estado[\"Murder.Rate\"].plot.bar()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "7xirAdJSpNnk",
        "outputId": "cad92ff7-38a8-475a-f59e-c1809acf66f1"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiEAAAGhCAYAAAC3T2TCAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAALHdJREFUeJzt3Xt0VOW9xvHfTBKSQC5AIBAkJBFRREAQIYIcuZxURORiFaXKAWkVRBCRc6yJFZGiBFoXxduBylJEKogXBJEDXkCkiAgEQW1F7hrBAIomQCRQ8pw/WNllSAJBJ76T8P2stddiZv+y9zuZeWc/effeLz5JMgAAgF+Y33UDAADAuYkQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMCJcNcNOFVxcbHt2bPHYmNjzefzuW4OAACoAEl28OBBa9Sokfn9FRvjCLkQsmfPHktOTnbdDAAA8BPk5uZa48aNK1QbciEkNjbWzE68iLi4OMetAQAAFVFQUGDJycnecbwiQi6ElJyCiYuLI4QAAFDFnM2lFFyYCgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADAiXDXDQCqstTMxaWe2zWpl4OWAEDVw0gIAABwghACAACcIIQAAAAnCCEAAMCJsw4hK1eutN69e1ujRo3M5/PZggULAtZLsoceesiSkpIsOjraMjIybOvWrcFqLwAAqCbOOoQcPnzYLr30Unv66afLXP+nP/3JnnjiCZs+fbp99NFHVqtWLevRo4cdOXLkZzcWAABUH2d9i27Pnj2tZ8+eZa6TZFOnTrUHH3zQ+vbta2ZmL7zwgjVo0MAWLFhgAwYM+HmtBQAA1UZQrwnZuXOn5eXlWUZGhvdcfHy8paen24cffhjMXQEAgCouqJOV5eXlmZlZgwYNAp5v0KCBt+5URUVFVlRU5D0uKCgIZpMAAECIcn53THZ2tsXHx3tLcnKy6yYBAIBfQFBDSMOGDc3MbO/evQHP792711t3qqysLMvPz/eW3NzcYDYJAACEqKCGkLS0NGvYsKEtW7bMe66goMA++ugj69ixY5k/ExkZaXFxcQELAACo/s76mpBDhw7Ztm3bvMc7d+60jRs3Wt26da1JkyY2evRoe+SRR6xZs2aWlpZmY8eOtUaNGlm/fv2C2W4AAFDFnXUIWb9+vXXr1s17PGbMGDMzGzx4sD3//PP2+9//3g4fPmxDhw61H374wTp37mxLly61qKio4LUaAABUeT5Jct2IkxUUFFh8fLzl5+dzagYhLzVzcanndk3q5aAlAODWTzl+O787BgAAnJsIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADAiXDXDQBQdaRmLi713K5JvRy0BEB1wEgIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAngh5Cjh8/bmPHjrW0tDSLjo62pk2b2oQJE0xSsHcFAACqsPBgb3Dy5Mk2bdo0mzVrll1yySW2fv16GzJkiMXHx9uoUaOCvTsAAFBFBT2ErF692vr27Wu9evUyM7PU1FSbO3eurV27Nti7AgAAVVjQT8d06tTJli1bZlu2bDEzs02bNtmqVausZ8+eZdYXFRVZQUFBwAIAAKq/oI+EZGZmWkFBgTVv3tzCwsLs+PHj9uijj9qtt95aZn12draNHz8+2M0AAAAhLugjIS+//LK9+OKLNmfOHNuwYYPNmjXLHnvsMZs1a1aZ9VlZWZafn+8tubm5wW4SAAAIQUEfCbnvvvssMzPTBgwYYGZmrVq1si+//NKys7Nt8ODBpeojIyMtMjIy2M0AAAAhLugjIYWFheb3B242LCzMiouLg70rAABQhQV9JKR379726KOPWpMmTeySSy6xjz/+2KZMmWK//e1vg70rAABQhQU9hDz55JM2duxYu+uuu2zfvn3WqFEjGzZsmD300EPB3hUAAKjCgh5CYmNjberUqTZ16tRgbxoAAFQj/N8xAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMCJcNcNAFD9pGYuLvXcrkm9HLQEQChjJAQAADhBCAEAAE4QQgAAgBOEEAAA4AQhBAAAOEEIAQAATnCLLgAg5HHbd/XESAgAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADAiUoJIbt377aBAwdaQkKCRUdHW6tWrWz9+vWVsSsAAFBFBX3G1O+//96uvPJK69atmy1ZssTq169vW7dutTp16gR7V0C1w6yQAM4lQQ8hkydPtuTkZJs5c6b3XFpaWrB3AwAAqrign45544037PLLL7f+/ftbYmKitW3b1mbMmFFufVFRkRUUFAQsAACg+gv6SMiOHTts2rRpNmbMGHvggQds3bp1NmrUKKtRo4YNHjy4VH12draNHz8+2M0AcA7idBZQtQR9JKS4uNguu+wymzhxorVt29aGDh1qd9xxh02fPr3M+qysLMvPz/eW3NzcYDcJAACEoKCHkKSkJGvRokXAcxdffLF99dVXZdZHRkZaXFxcwAIAAKq/oIeQK6+80r744ouA57Zs2WIpKSnB3hUAAKjCgh5C7r33XluzZo1NnDjRtm3bZnPmzLFnnnnGRowYEexdAQCAKizoIaR9+/b2+uuv29y5c61ly5Y2YcIEmzp1qt16663B3hUAAKjCgn53jJnZddddZ9ddd11lbBoAAFQTlRJCULkqehsitysCAEIZ/4EdAABwghACAACcIIQAAAAnQv6aEK5rqHz8jgGca/jeCw2MhAAAACcIIQAAwImQPx1TUcEeWmOoDgCAysVICAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcqDa36AIojVvNAYQyRkIAAIAThBAAAOAEp2PgDKcKAODcxkgIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJzgFl0ACCHcuo5zCSMhAADACUIIAABwghACAACc4JoQhDzOkQNA9cRICAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwgrtjAOBn4O6tsvF7QUUwEgIAAJwghAAAACcIIQAAwIlz7poQzlMCABAaGAkBAABOEEIAAIAThBAAAOAEIQQAADhBCAEAAE4QQgAAgBPn3C26AIDSmL4ALjASAgAAnCCEAAAAJzgd8zOdOoTJ8CUAVA+coqp8jIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnKj0EDJp0iTz+Xw2evToyt4VAACoQip1xtR169bZX//6V2vdunVl7gYAgGrjXJqptdJGQg4dOmS33nqrzZgxw+rUqVNZuwEAAFVUpYWQESNGWK9evSwjI6OydgEAAKqwSjkd89JLL9mGDRts3bp1Z6wtKiqyoqIi73FBQUFlNAkAAISYoIeQ3Nxcu+eee+ydd96xqKioM9ZnZ2fb+PHjg90MAICdW9cXoGyh/BkI+umYnJwc27dvn1122WUWHh5u4eHh9v7779sTTzxh4eHhdvz48YD6rKwsy8/P95bc3NxgNwkAAISgoI+E/Od//qd9+umnAc8NGTLEmjdvbvfff7+FhYUFrIuMjLTIyMhgNwMAAIS4oIeQ2NhYa9myZcBztWrVsoSEhFLPA0AoO3UYO1SGsIHqghlTAQCAE5U6WVmJFStW/BK7AQAAVQgjIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACc+EXmCQGqolD+T5+qC37HwLmNkRAAAOAEIQQAADhBCAEAAE4QQgAAgBOEEAAA4AQhBAAAOEEIAQAAThBCAACAE4QQAADgBCEEAAA4QQgBAABOEEIAAIAThBAAAOAEIQQAADhBCAEAAE4QQgAAgBOEEAAA4ES46wYAv7TUzMWlnts1qZeDluBcwucOKI2REAAA4AQhBAAAOMHpGACogji9g+qAkRAAAOAEIQQAADjB6RgAIY9TD0Dlc9HPGAkBAABOEEIAAIAThBAAAOAE14T8AjifDQBAaYyEAAAAJwghAADACU7HAACACgvmJQaMhAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACW7RBQCgCqoOs3EzEgIAAJwghAAAACcIIQAAwAmuCQkh1eH8HgCcDb73zm2MhAAAACcIIQAAwAlOxwAAqg0Xp3c4pfTTMRICAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwIegjJzs629u3bW2xsrCUmJlq/fv3siy++CPZuAABAFRf0EPL+++/biBEjbM2aNfbOO+/YsWPH7Oqrr7bDhw8He1cAAKAKC/o8IUuXLg14/Pzzz1tiYqLl5OTYVVddFezdAQCAKqrSJyvLz883M7O6deuWub6oqMiKioq8xwUFBZXdJAAAEAIqNYQUFxfb6NGj7corr7SWLVuWWZOdnW3jx4+vzGbgF8bsgZWP3zFc4bOHYKrUu2NGjBhhn332mb300kvl1mRlZVl+fr635ObmVmaTAABAiKi0kZCRI0fam2++aStXrrTGjRuXWxcZGWmRkZGV1QwAABCigh5CJNndd99tr7/+uq1YscLS0tKCvQsAAFANBD2EjBgxwubMmWMLFy602NhYy8vLMzOz+Ph4i46ODvbuAA/nqgGgagn6NSHTpk2z/Px869q1qyUlJXnLvHnzgr0rAABQhVXK6RgAAIAzqfR5QlB9cLoDABBM/Ad2AADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCW3SBX0Co394c6u0DqgP6WWmMhAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHAi3HUDAOCXlpq5uNRzuyb1ctAS4NzGSAgAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCi0kLI008/bampqRYVFWXp6em2du3aytoVAACogiolhMybN8/GjBlj48aNsw0bNtill15qPXr0sH379lXG7gAAQBVUKSFk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k080evRoXXzxxerbt6+OHj2qI0eOqHfv3ho4cKD3Zenz+cpd/H6//H6/1y+ysrLUuHFjLV++XIcPH9aqVavUtGlTZWZmKi4uzjvQdOnSRffee2/A633wwQd15ZVXyufz6Y9//KPatm0rn8+nSy65RH/5y1/07bffBtRfdtlleuSRRySd6N+1a9fWH//4R2/9Y489pjZt2ujmm29Wv379lJ+fryNHjmjkyJEaNGiQpBMHw4SEBE2dOjWkD3zBDoWdO3cO6QOfi37h8/nUt2/fM/YNMzun+sVPEXIhJDU1NeAvg1PNmjVLKSkpklShLz4z0yeffOL9fHFxse688041adJE27dv9zp3XFycdzA9fvy4wsPDtWHDBu/nPv30UzVo0ECStHbtWl144YX67//+b+8vhNOFkPPPP19vv/12wOv44IMPlJycrISEBK1fv16SlJiYqI0bNwbUbdu2TdHR0QHbO3r0qObNm+d12EaNGumBBx7Q1q1bFR0d7QUsSYqIiNBnn33mPd61a5d8Pp/3l7kk7dmzRz6fT4WFhZKknTt3ekEvIyNDffv2VX5+fqn3Ij8/X3379tXVV1+tTZs2nXaZN2+e/H6/Bg0apPT0dK1bt07vvPOO2rVrp8svv1wHDhyQ9O8OnpGRodtvv10FBQX685//rMaNG+v222/39j1kyBD169dPPp9PjRs3VmpqasDi8/l03nnnKTU1VWlpaQG/v+HDh6tFixbeX3C5ublq166d7rzzTtWqVct7Pj09XZMmTQp4zU8++aTXsWfOnKm+ffsqIiJCCQkJuueee7y/HiWpRYsWXqhcvny5oqKi9PTTT3vrZ86cqYsvvlg9e/bUsGHDvNG/SZMmqWfPnpKkLVu2KDU1VePGjVNMTEzAZ/JU69evV0xMTMAXW1lLyfomTZrovffe835+//796tChg66++modOXLECyEff/yxJOnQoUPy+Xz6+9//7v3MBx98oCZNmuiaa65Rr169Sh14T9cvWrZsqTlz5gTUL1y4UBdeeKFq1arl/THSoEGDMvtFyWst2d769es1fPhw1a5dW5GRkerfv7/X72rVqqWdO3dKOvEdEBEREfC9sH37dsXExCguLi6gvxw6dEgRERHe53/27Nm66KKLQvrAF+xQGBkZGdIHPhf9wu/3q379+mfsG1FRUedUv/gpQi6EPPXUU4qMjNSoUaO0cOFCrVmzRmvWrNHChQs1atQoRUdHe1/kjRo10oIFC8rd1scffywzK3PofsSIEWrcuLFWrlzphZBt27Z562NiYgJGC3bt2uUdmKUToxmDBg1S69at9emnnyoiIqLUh2rfvn1eO08+OJ28vYEDB+p3v/udJKl///568MEHA+omTpyoVq1aBXyoTvbll19q3Lhx3l9HaWlpWrJkiaQTBzC/36+XX37Zq1+8eLFiY2PVsmVLLVmyRMuXL1e3bt3UtWtXr2bp0qVq2rSpJCk6OrpU20/2ySefeCGpvC+9kzt4o0aNAoarS74427Rpo++++87r4HXq1PHet6NHj3qjIyVycnJ03nnnadiwYWrTpk2p9/h0nfyiiy7SwoULA+rfffddpaWlKT4+Xps2bZJ0IhSW/LvEtm3bVLNmzYDt7d27V5MnT1bz5s3l9/vVvn17PfPMM2UGwpN/lzt37lTNmjVVs2bNgOHloqIiRUREeF/eCxYsUGpqqhISErRixYpy34v33ntPCQkJiouL0+TJk7VixYoylxkzZsjv9ys6OtoLXCUKCgrUsWNHde/eXTt27JCZBbyGmJiYgH7y1VdfKTIyUpI0ZcoUJScneyNJ5b0PJf2iXr16AV9s0ol+ER0dre7du+tPf/qTJKlTp06l/jB59dVX1aRJkzL7xY8//qgXXnhBXbt2ld/vV2pqqho2bOiF/QMHDsjn8wUcaNauXauGDRuqfv36Ae0tLCyU3+/3Tglu375dkZGRIX3gC3Yo9Pl8IX3gc9EvSuoq0jfOpX7xU4RcCJGkl156Senp6QoPD/cOZOHh4UpPT9e8efO8ut69e2vs2LHlbmfjxo0yM73wwgtlrh8xYoRq164tv9+v1q1bewdv6cTIR8k5V+nEtQFpaWmltjF37lw1aNBAfr+/1IeqVatWatu2rWJiYvTqq68G/Nz777+v8847T7t371ZqaqquuuoqjRkzRtHR0ercubPuuOMOXXXVVapRo4YWL15cbggpUVxcrLffflsPPvig6tevr9tvv11paWnKzMxUkyZNNG3aNE2fPl3JyckaMWKEbrrpJu/326lTp4BO99Zbb3nBJSkpKaDznOqNN95QUlKSEhIS9Oyzz2rXrl1lLosXL5bf71etWrVKXatx7Ngx9evXT61bt9Ynn3zi1ZV8UUmlQ+GXX37phcL58+crOTlZTz75pLf+dJ08MTGxzE4eGRmpPn36KDMzU5LUo0cPPf744wF1M2bMULNmzcp9P1auXKnBgwerVq1a8vl8WrlypSRp9+7d8vl8Wrx4sVe7YsUKNW7cWI0aNVJOTo73/Pfffy+fz6eCggJJJ87RR0ZG6q677lJKSormz58fMDKVn5+v+fPnKzU1VSNHjlTXrl01efLkUm0rUXKt1EUXXRTQnhIHDx5Ux44ddemll8rMAg5y//u//+u1SzoRBhs2bOg9/vjjj9WiRQsNHTpUhw8fLvN9GDZsmO69914lJiaWGiHMyclRvXr1tHr1asXHx2vcuHF68sknVa9ePT344IN68cUX9dBDD6l27dqaPHlywF/yZdm6dat3/UJ6err+9re/qXfv3urRo4euuOIKff7559q8ebO6dOmiG2+8Uddff71uuOEGHTp0SEePHtXo0aN1wQUXeNtbs2aNGjZsGPIHPil4odDv94f0gc9Fv/D7/WratGmF+8a50i9+ipAMISWOHj2qPXv2aM+ePQEXRpVYuXJlQHA41aFDh3THHXd4Q9tlGT58uHw+n6ZNm6Y333yz3LqsrCxvxOJUubm5WrBggQ4dOuQ99/DDDwcsp15s9T//8z8aMGCApBMHnfvvv18tWrRQVFSUatSooZSUFN1yyy1at26dpBOnqU4d1izL8ePH9eijj+q6667TxIkTVVxcrLlz53qnfm677TavnT/++GOZF4eebOzYsapTp46mTJmiTZs2KS8vT3l5edq0aZOmTJmiunXraty4cbr66qs1YcKEcrdT0sFbtWpVKpBJ/w4iTZo08a7ROPm6mzfffNM7XSSd+NA3btzYe/z111+re/fuuuaaa/TNN9+U2cmvvfZaXX/99apTp06pYLVmzRo1aNBA//znP5WQkKBBgwZpwoQJiomJ0cCBA/Xoo49q0KBBioyM1MyZM8/YyfPz89W1a1c1a9ZMjzzyiDp06KDBgwerefPmWrJkiZYuXapWrVrpt7/9rQYPHqwuXbro888/144dO7xz7SVWrFih5ORkHTlyRHfeeadq1Kghv9+vqKgoRUVFye/3q0aNGho+fLiOHDmiZ555plR4OlleXp4efvhh3X333brxxhvLrCkoKFB6errMTDNmzCh3W9nZ2br22msDnissLNSwYcPUrFkzhYWFBbwPXbp0Cbig+9RtT5gw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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "estado[\"Murder.Rate\"].plot.bar(color=\"orange\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "PHw_Xnn3pmWU",
        "outputId": "e0b08dab-854c-477a-9415-e04ea6e9751f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiEAAAGhCAYAAAC3T2TCAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAALGlJREFUeJzt3Xt0FGWexvFfdRKSAEmAcAsSSEQUERBEiCArl82IiFwcRRllQWYURBDRXUdwRGRQAjMeBm8LI0cRGUG8IIgueAkig4hIENQZkbtGMAFFEyASGPLsH5zU0CSBoB3eTvh+zqlz6Opfqt6m++168lbVG0+SDAAA4AwLuG4AAAA4OxFCAACAE4QQAADgBCEEAAA4QQgBAABOEEIAAIAThBAAAOAEIQQAADgR6boBJyoqKrLdu3dbXFyceZ7nujkAAKAcJNn+/futUaNGFgiUb4wj7ELI7t27LTk52XUzAADAz5CdnW2NGzcuV23YhZC4uDgzO/Yi4uPjHbcGAACUR35+viUnJ/vH8fIIuxBSfAomPj6eEAIAQCVzOpdScGEqAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnIl03AKjU5nkl192kM98OAKiEGAkBAABOEEIAAIAThBAAAOAEIQQAADhx2iFk5cqV1qdPH2vUqJF5nmeLFi0Kel6SPfjgg5aUlGSxsbGWnp5uW7ZsCVV7AQBAFXHaIeTgwYN28cUX21NPPVXq83/605/s8ccft5kzZ9pHH31kNWrUsJ49e9qhQ4d+cWMBAEDVcdq36Pbq1ct69epV6nOSbPr06fbAAw9Yv379zMzs+eeftwYNGtiiRYts4MCBv6y1AACgygjpNSE7duywnJwcS09P99clJCRYWlqaffjhh6HcFQAAqORCOllZTk6OmZk1aNAgaH2DBg38505UWFhohYWF/uP8/PxQNgkAAIQp53fHZGRkWEJCgr8kJye7bhIAADgDQhpCGjZsaGZmubm5Qetzc3P95040btw4y8vL85fs7OxQNgkAAISpkIaQ1NRUa9iwoWVmZvrr8vPz7aOPPrJOnTqV+jPR0dEWHx8ftAAAgKrvtK8JOXDggG3dutV/vGPHDtuwYYPVqVPHmjRpYmPGjLGHH37YmjdvbqmpqTZ+/Hhr1KiR9e/fP5TtBgAAldxph5B169ZZ9+7d/cf33HOPmZkNGTLEnnvuOfv9739vBw8etGHDhtmPP/5oXbp0sWXLlllMTEzoWg0AACo9T1JY/d3x/Px8S0hIsLy8PE7NIPzN80quuymsuhQAnBE/5/jt/O4YAABwdiKEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnIl03AEAlMs8rue4mnfl2AKgSGAkBAABOEEIAAIAThBAAAOAEIQQAADhBCAEAAE4QQgAAgBOEEAAA4AQhBAAAOEEIAQAAThBCAACAE4QQAADgBCEEAAA4QQgBAABOEEIAAIAThBAAAOBEyEPI0aNHbfz48ZaammqxsbHWrFkzmzRpkkkK9a4AAEAlFhnqDU6dOtVmzJhhc+bMsYsuusjWrVtnQ4cOtYSEBBs9enSodwcAACqpkIeQ1atXW79+/ax3795mZpaSkmLz58+3tWvXhnpXAACgEgv56ZjOnTtbZmambd682czMNm7caKtWrbJevXqVWl9YWGj5+flBCwAAqPpCPhIyduxYy8/PtxYtWlhERIQdPXrUHnnkEbv55ptLrc/IyLCJEyeGuhkAACDMhXwk5KWXXrIXXnjB5s2bZ+vXr7c5c+bYo48+anPmzCm1fty4cZaXl+cv2dnZoW4SAAAIQyEfCbn33ntt7NixNnDgQDMza926tX311VeWkZFhQ4YMKVEfHR1t0dHRoW4GAAAIcyEfCSkoKLBAIHizERERVlRUFOpdAQCASizkIyF9+vSxRx55xJo0aWIXXXSRffLJJzZt2jT77W9/G+pdAQCASizkIeSJJ56w8ePH2x133GF79uyxRo0a2fDhw+3BBx8M9a4AAEAlFvIQEhcXZ9OnT7fp06eHetMAAKAK4W/HAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnIl03AEAVNM8rue4mnfl2AAhrjIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlu0QUAhD9u+66SGAkBAABOEEIAAIAThBAAAOAEIQQAADhBCAEAAE4QQgAAgBOEEAAA4AQhBAAAOFEhIWTXrl02aNAgS0xMtNjYWGvdurWtW7euInYFAAAqqZDPmPrDDz/Y5Zdfbt27d7elS5davXr1bMuWLVa7du1Q7wqoepgVEsBZJOQhZOrUqZacnGyzZ8/216WmpoZ6NwAAoJIL+emY119/3S699FIbMGCA1a9f39q1a2ezZs0qs76wsNDy8/ODFgAAUPWFPIRs377dZsyYYc2bN7e33nrLRowYYaNHj7Y5c+aUWp+RkWEJCQn+kpycHOomAThbzPNKLgDCVshDSFFRkV1yySU2efJka9eunQ0bNsxuu+02mzlzZqn148aNs7y8PH/Jzs4OdZMAAEAYCnkISUpKspYtWwatu/DCC+3rr78utT46Otri4+ODFgAAUPWFPIRcfvnl9uWXXwat27x5szVt2jTUuwIAAJVYyEPI3XffbWvWrLHJkyfb1q1bbd68efb000/byJEjQ70rAABQiYU8hHTo0MFee+01mz9/vrVq1comTZpk06dPt5tvvjnUuwIAAJVYyOcJMTO75ppr7JprrqmITQMAgCqiQkIIKlh5Z9Vk9k0AQBjjD9gBAAAnCCEAAMAJQggAAHAi/K8J4bqGisf/MYCzDd97YYGREAAA4AQhBAAAOBH+p2PKK9RDawzVAQBQoRgJAQAAThBCAACAE4QQAADgBCEEAAA4QQgBAABOEEIAAIATVecWXQAlcas5gDDGSAgAAHCCEAIAAJzgdAzc4VQBAJzVGAkBAABOEEIAAIAThBAAAOAEIQQAADhBCAEAAE4QQgAAgBPcogsA4YRb13EWYSQEAAA4QQgBAABOEEIAAIATXBOC8Mc5cgCokhgJAQAAThBCAACAE4QQAADgBCEEAAA4QQgBAABOcHcMAPwS3L1VOv5fUA6MhAAAACcIIQAAwAlCCAAAcOLsuyaE85QAAIQFRkIAAIAThBAAAOAEIQQAADhBCAEAAE4QQgAAgBOEEAAA4MTZd4suAKAkpi+AA4yEAAAAJwghAADACU7H/FInDmEyfAkAVQOnqCocIyEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJyo8hEyZMsU8z7MxY8ZU9K4AAEAlUqEzpn788cf217/+1dq0aVORuwEAoOo4i2ZqrbCRkAMHDtjNN99ss2bNstq1a1fUbgAAQCVVYSFk5MiR1rt3b0tPT6+oXQAAgEqsQk7HvPjii7Z+/Xr7+OOPT1lbWFhohYWF/uP8/PyKaBIAAAgzIQ8h2dnZdtddd9k777xjMTExp6zPyMiwiRMnhroZAACzs+r6ApQhjD8DIT8dk5WVZXv27LFLLrnEIiMjLTIy0t5//317/PHHLTIy0o4ePRpUP27cOMvLy/OX7OzsUDcJAACEoZCPhPznf/6nffbZZ0Hrhg4dai1atLD77rvPIiIigp6Ljo626OjoUDcDAACEuZCHkLi4OGvVqlXQuho1alhiYmKJ9QAQ1k4cxg6TIWygqmDGVAAA4ESFTlZWbMWKFWdiNwAAoBJhJAQAADhBCAEAAE4QQgAAgBOEEAAA4AQhBAAAOEEIAQAAThBCAACAE2dknhCgUgrjP/pUZfB/DJzVGAkBAABOEEIAAIAThBAAAOAEIQQAADhBCAEAAE4QQgAAgBOEEAAA4AQhBAAAOEEIAQAAThBCAACAE4QQAADgBCEEAAA4QQgBAABOEEIAAIAThBAAAOAEIQQAADhBCAEAAE5Eum4AcMbN80quu0lnvh04u/C5A0pgJAQAADhBCAEAAE5wOgYAKiNO76AKYCQEAAA4QQgBAABOcDoGQPjj1ANQ8Rz0M0ZCAACAE4QQAADgBCEEAAA4wTUhZwLnswEAKIGREAAA4AQhBAAAOMHpGAAAUH4hvMSAkRAAAOAEIQQAADhBCAEAAE4QQgAAgBOEEAAA4AQhBAAAOMEtugAAVEZVYDZuRkIAAIAThBAAAOAEIQQAADjBNSHhpAqc3wOA08L33lmNkRAAAOAEIQQAADjB6RgAQNXh4vQOp5R+NkZCAACAE4QQAADgBCEEAAA4QQgBAABOEEIAAIATIQ8hGRkZ1qFDB4uLi7P69etb//797csvvwz1bgAAQCUX8hDy/vvv28iRI23NmjX2zjvv2JEjR+zKK6+0gwcPhnpXAACgEgv5PCHLli0Levzcc89Z/fr1LSsry6644opQ7w4AAFRSFT5ZWV5enpmZ1alTp9TnCwsLrbCw0H+cn59f0U0CAABhoEJDSFFRkY0ZM8Yuv/xya9WqVak1GRkZNnHixIpsBs40Zg+sePwfwxU+ewihCr07ZuTIkfb555/biy++WGbNuHHjLC8vz1+ys7MrskkAACBMVNhIyKhRo+yNN96wlStXWuPGjcusi46Otujo6IpqBgAACFMhDyGS7M4777TXXnvNVqxYYampqaHeBQAAqAJCHkJGjhxp8+bNs8WLF1tcXJzl5OSYmVlCQoLFxsaGenfAv3GuGgAqlZBfEzJjxgzLy8uzbt26WVJSkr8sWLAg1LsCAACVWIWcjgEAADiVCp8nBFUIpzsAACHEH7ADAABOEEIAAIAThBAAAOAEIQQAADhBCAEAAE4QQgAAgBPcogucCeF+e3O4tw+oCuhnJTASAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwIlI1w0AgDNunldy3U068+0AznKMhAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcIIQAAwAlCCAAAcIIQAgAAnCCEAAAAJwghAADACUIIAABwghACAACcIIQAAAAnCCEAAMAJQggAAHCCEAIAAJwghAAAACcqLIQ89dRTlpKSYjExMZaWlmZr166tqF0BAIBKqEJCyIIFC+yee+6xCRMm2Pr16+3iiy+2nj172p49eypidwAAoBKqkBAybdo0u+2222zo0KHWsmVLmzlzplWvXt2effbZitgdAACohEIeQg4fPmxZWVmWnp7+750EApaenm4ffvhhqHcHAAAqqchQb/C7776zo0ePWoMGDYLWN2jQwDZt2lSivrCw0AoLC/3HeXl5ZmaWn59/bEVBKTspfu544VIXzm2jLvR14dw26kJfF85toy70deHctjCsKz5uSyqloAwKsV27dsnMtHr16qD19957rzp27FiifsKECTIzFhYWFhYWliqwZGdnlzszhHwkpG7duhYREWG5ublB63Nzc61hw4Yl6seNG2f33HOP/7ioqMj27dtniYmJ5nmemR0bFUlOTrbs7GyLj48vc9/UhU9dOLeNOt5b6vgMUBf691aS7d+/3xo1alTmz50o5CGkWrVq1r59e8vMzLT+/fub2bFgkZmZaaNGjSpRHx0dbdHR0UHratWqVeq24+PjT/qfQl341YVz26j7ZXXh3DbqzkxdOLeNul9W93O3lZCQcMqfOV7IQ4iZ2T333GNDhgyxSy+91Dp27GjTp0+3gwcP2tChQytidwAAoBKqkBBy44032t69e+3BBx+0nJwca9u2rS1btqzExaoAAODsVSEhxMxs1KhRpZ5++Tmio6NtwoQJJU7bUBe+deHcNup+WV04t426M1MXzm2j7pfVhXqfp+JJp3MvDQAAQGjwB+wAAIAThBAAAOAEIQQAADhBCAkRLq0BAOD0VNjdMb/Ed999Z88++6x9+OGHlpOTY2ZmDRs2tM6dO9stt9xi9erVc9zCkqKjo23jxo124YUXum5KuXz77bc2Y8YMW7VqlX377bcWCATs3HPPtf79+9stt9xiERERrpsIAKjiwu7umI8//th69uxp1atXt/T0dH9ukdzcXMvMzLSCggJ766237NJLLz3ltrKzs23ChAn21FNPWVZWltWpU8datmwZVHPo0CF76aWXbPDgwfbFF1/YmjVrrFOnTtaiRQvbtGmTPfbYY1ZYWGiDBg2yHj16BE0xf7zHHnvMBg0aZImJiWZmNm3atKDnDx48aC+99JJt3brVkpKS7De/+Y0lJiba+vXrrXbt2paammpmZnPnzrWZM2fa119/bU2bNrVRo0bZwIED7c4777QbbrjB/uM//uOUr/vJJ5+0tWvX2tVXX20DBw60uXPnWkZGhhUVFdmvf/1r69u3r1111VV23nnnWWxsrH344Yd200032eHDh+2tt96yli1b2rJlyywuLu6U+8KZt3bt2hIBvVOnTtaxY8dy/fwPP/xgS5YsscGDB5vZsRmNA4GSg6JFRUX2zTffWHJysu3cudOSk5MtMjLSDh8+bK+99poVFhba1VdfbXXr1i1zXz169LDZs2db06ZNy6zZsWOH3y9atWplZsf+sGUgELCoqCgzM9u2bZs9++yzfr/43e9+Z6mpqfbqq69ar169rHr16qd83Rs3brSsrCzr1q2bnXvuufaPf/zDnnrqKSsqKrJrr73Wevbs6dcuX768REDv27evNW/e/JT7gRtnul80adLEJP2svkG/OM7P/1N1FSMtLU3Dhg1TUVFRieeKioo0bNgwXXbZZeXa1oYNG+R5npo2bSrP8xQIBHTFFVdo9+7dfk1OTo4CgYCWLl2qatWqqU6dOoqJidHSpUtVr149paenq0ePHoqIiFBmZqY8z1Pbtm3VrVu3oMXzPHXo0EHdunVT9+7ddeGFF+r777+XJH399ddKSUlRQkKCOnTooDp16qh+/fravn272rRpo3feeUeSNGvWLMXGxmr06NGaMWOGxowZo5o1a+qZZ57x29+8eXNNmTJF3377bamvedKkSYqLi9N1112nhg0basqUKUpMTNTDDz+syZMnq169ekpOTtZDDz3k/8zcuXOVlpYmSdq3b5/atm2r0aNH+88XFhZqwYIFGjNmjAYOHKiBAwdqzJgxeumll1RYWFiu9yInJ0cTJ070H2dnZ2v//v0l6g4fPqz3339fkvTdd99p+fLl/v/j3r17NWXKFE2cOFH//Oc/T7q/1NRUbd68uczni4qKtHz5cj399NNasmSJDh8+7Ldr7969ft3KlSt10003qUuXLrr55pv9P8z46KOPaufOnad83UuWLNH48eO1atUqSVJmZqZ69eqlnj176q9//atfV1BQoGeeeUZDhw7VVVddpauvvlqjRo3Su+++69fk5uaqS5cu/me6Y8eO6tixo//57tKli3Jzc0/Zpg0bNigQCCgvL08DBgxQTEyM6tevr/Hjx+tf//qXX5eTk+PvKxAI6LzzztP27dvVvn171ahRQ9WrV1fdunW1efNmLV68uNQlIiJCTz75pP94xIgR/vteUFCg6667ToFAwP98d+/eXfv371fXrl318ssvS5JWrVql6OhotWnTRjfeeKPatWun6tWra/Xq1fI8T/Hx8brtttu0Zs2aMl/zq6++qoiICCUmJqpmzZp65513VKtWLaWnp6tnz56KiIjQCy+8oNzcXHXs2FGBQECRkZEKBAJq3769GjZsqIiICN17771B2/3oo480ffp0jR07VmPHjtX06dP10UcfnfI9KLZv3z7NmTPHf3z06NFS644ePaqvvvpK0rHP7vbt23XkyBFJx/rniy++qDlz5gR9dkvTvXv3U35ut2/frrffflufffaZJOnQoUN+/5CkrVu36v7779egQYP0hz/8Qdu3b5ckvfLKKzp48OApXvExGzZs0DPPPKNt27ZJkj7//HONGDFCw4cP17Jly4JqMzMzNXHiRN1+++2644479Oijjwb1bRf9IhAIaNOmTafsGzNmzDgr+8XpCLsQEhMToy+++KLM57/44gvFxMRIUplffMXLX/7yF5mZevfurb1792rLli3q3bu3UlNT/Q5d/IHq1KmT/vCHP0iS5s+fr9q1a+v+++/39zt27Fj96le/UkZGhlJTU5WZmRnUrsjISP3jH//wH3ue53/wb775ZnXu3Fk//vijJGn//v1KT0/Xb37zG8XGxvpfCu3atdPTTz8dtN0XXnhBLVu2lOd5evfdd3XXXXepbt26ioqKUt++fbVkyZKgL65mzZrp1VdflXSsU0VEROhvf/ub//zChQvleZ7f+aVjX3BRUVHKycmRJL399ttq1KiRJGnLli0699xzFRMTo65du+qGG27QDTfcoK5duyomJkbnnXeetmzZUub7Vay4g+/evVsdOnRQIBBQRESE/uu//isojBS/Hx999JESEhLkeZ5q166tdevWKTU1Vc2bN1ezZs0UGxurrKwsPfbYY6UuERERGjdunP+4V69e/v//999/r7S0NHmep3r16ikQCKhFixbas2ePOnbsqCVLlkiSFi1apEAgoL59++q+++7Ttddeq6ioKC1ZskSe5ykiIkLp6el68cUXSw1jM2fOVGRkpNq3b6/4+HjNnTtXcXFxuvXWWzV8+HDFxsZq+vTp2rJli5o2bar69esrOTlZnuepd+/eSktLU0REhAYMGKAjR47ouuuuU6dOnbRp06YS+9q0aZM6d+6s66+/Xnl5eSdd/v73vysQCGj06NE6//zz9fLLL2vWrFlq2rSpevfu7b+WnJwcmZn69u2rTz/9VGPGjNGFF16ofv366fDhwzp06JD69OmjQYMG+V+WnueVuQQCAQUCAb9fjBs3To0bN9by5ct18OBBrVq1Ss2aNdPYsWMVHx/vH2i6du2qu+++O+j1PvDAA7r88svleZ7++Mc/ql27dvI8TxdddJH+8pe/6Lvvvguqv+SSS/Twww9LOta/a9WqpT/+8Y/+848++qjatm2rG2+8Uf3791deXp4OHTqkUaNGafDgwZKOHQwTExM1ffr0sD7whToUdunSJawPfC76hed56tev3yn7hpmdVf3i5wi7EJKSkhL0m8GJ5syZo6ZNm0pSub74zEyffvqp//NFRUW6/fbb1aRJE23bts3v3PHx8f7B9OjRo4qMjNT69ev9n/vss8/UoEEDSdLatWt1/vnn67//+7/93xBOFkLOPfdcvf3220Gv44MPPlBycrISExO1bt06SVL9+vW1YcOGoLqtW7cqNjY2aHuHDx/WggUL/A7bqFEj3X///dqyZYtiY2P9gCVJUVFR+vzzz/3HO3fulOd5/m/mkrR79255nqeCggJJ0o4dO/ygl56ern79+ikvL6/Ee5GXl6d+/frpyiuv1MaNG0+6LFiwQIFAQIMHD1ZaWpo+/vhjvfPOO2rfvr0uvfRS7du3T9K/O3h6erpuvfVW5efn689//rMaN26sW2+91d/30KFD1b9/f3mep8aNGyslJSVo8TxP55xzjlJSUpSamhr0/zdixAi1bNnS/w0uOztb7du31+23364aNWr469PS0jRlypSg1/zEE0/4HXv27Nnq16+foqKilJiYqLvuusv/7VGSWrZs6YfK5cuXKyYmRk899ZT//OzZs3XhhReqV69eGj58uD/6N2XKFPXq1UuStHnzZqWkpGjChAmqWbNm0GfyROvWrVPNmjWDvthKW4qfb9Kkid577z3/5/fu3auOHTvqyiuv1KFDh/wQ8sknn0iSDhw4IM/z9Pe//93/mQ8++EBNmjTRVVddpd69e5c48J6sX7Rq1Urz5s0Lql+8eLHOP/981ahRw/9lpEGDBqX2i+LXWry9devWacSIEapVq5aio6M1YMAAv9/VqFFDO3bskHTsOyAqKiroe2Hbtm2qWbOm4uPjg/rLgQMHFBUV5X/+586dqwsuuCCsD3yhDoXR0dFhfeBz0S8CgYDq1at3yr4RExNzVvWLnyPsQsiTTz6p6OhojR49WosXL9aaNWu0Zs0aLV68WKNHj1ZsbKz/Rd6oUSMtWrSozG198sknMrNSh+5Hjhypxo0ba+XKlX4I2bp1q/98zZo1g0YLdu7c6R+YpWOjGYMHD1abNm302WefKSoqqsSHas+ePX47jz84Hb+9QYMG6Xe/+50kacCAAXrggQeC6iZPnqzWrVsHfaiO99VXX2nChAn+b0epqalaunSppGMHsEAgoJdeesmvf/PNNxUXF6dWrVpp6dKlWr58ubp3765u3br5NcuWLVOzZs0kSbGxsSXafrxPP/3UD0llfekd38EbNWoUNFxd/MXZtm1bff/9934Hr127tv++HT582B8dKZaVlaVzzjlHw4cPV9u2bUu8xyfr5BdccIEWL14cVP/uu+8qNTVVCQkJ2rhxo6RjobD438W2bt2q6tWrB20vNzdXU6dOVYsWLRQIBNShQwc9/fTTpQbC4/8vd+zYoerVq6t69epBw8uFhYWKioryv7wXLVqklJQUJSYmasWKFWW+F++9954SExMVHx+vqVOnasWKFaUus2bNUiAQUGxsrB+4iuXn56tTp07q0aOHtm/fLjMLeg01a9YM6idff/21oqOjJUnTpk1TcnKyP5JU1vtQ3C/q1q0b9MUmHesXsbGx6tGjh/70pz9Jkjp37lziF5NXXnlFTZo0KbVf/PTTT3r++efVrVs3BQIBpaSkqGHDhn7Y37dvnzzPCzrQrF27Vg0bNlS9evWC2ltQUKBAIOCfEty2bZuio6PD+sAX6lDoeV5YH/hc9IviuvL0jbOpX/wcYRdCJOnFF19UWlqaIiMj/QNZZGSk0tLStGDBAr+uT58+Gj9+fJnb2bBhg8xMzz//fKnPjxw5UrVq1VIgEFCbNm38g7d0bOSj+JyrdOzagNTU1BLbmD9/vho0aKBAIFDiQ9W6dWu1a9dONWvW1CuvvBL0c++//77OOecc7dq1SykpKbriiit0zz33KDY2Vl26dNFtt92mK664QtWqVdObb75ZZggpVlRUpLffflsPPPCA6tWrp1tvvVWpqakaO3asmjRpohkzZmjmzJlKTk7WyJEjdcMNN/j/v507dw7qdG+99ZYfXJKSkoI6z4lef/11JSUlKTExUc8884x27txZ6vLmm28qEAioRo0aJa7VOHLkiPr37682bdro008/9euKv6ikkqHwq6++8kPhwoULlZycrCeeeMJ//mSdvH79+qV28ujoaPXt21djx46VJPXs2VOPPfZYUN2sWbPUvHnzMt+PlStXasiQIapRo4Y8z9PKlSslSbt27ZLneXrzzTf92hUrVqhx48Zq1KiRsrKy/PU//PCDPM9Tfn6+pGPn6KOjo3XHHXeoadOmWrhwYdDIVF5enhYuXKiUlBSNGjVK3bp109SpU0u0rVjxtVIXXHBBUHuK7d+/X506ddLFF18sMws6yP3v//6v3y7pWBhs2LCh//iTTz5Ry5YtNWzYMB08eLDU92H48OG6++67Vb9+/RIjhFlZWapbt65Wr16thIQETZgwQU888YTq1q2rBx54QC+88IIefPBB1apVS1OnTg36Tb40W7Zs8a9fSEtL09/+9jf16dNHPXv21GWXXaYvvvhCmzZtUteuXXX99dfr2muv1XXXXacDBw7o8OHDGjNmjM477zx/e2vWrFHDhg3D/sAnhS4UBgKBsD7wuegXgUBAzZo1K3ffOFv6xc8RliGk2OHDh7V7927t3r076MKoYitXrgwKDic6cOCAbrvtNn9ouzQjRoyQ53maMWOG3njjjTLrxo0b549YnCg7O1uLFi3SgQMH/HUPPfRQ0HLixVb/8z//o4EDB0o6dtC577771LJlS8XExKhatWpq2rSpbrrpJn388ceSjp2mOnFYszRHjx7VI488omuuuUaTJ09WUVGR5s+f75/6ueWWW/x2/vTTT6VeHHq88ePHq3bt2po2bZo2btyonJwc5eTkaOPGjZo2bZrq1KmjCRMm6Morr9SkSZPK3E5xB2/dunWJQCb9O4g0adLEv0bj+Otu3njjDf90kXTsQ9+4cWP/8TfffKMePXroqquu0rfffltqJ7/66qt17bXXqnbt2iWC1Zo1a9SgQQP985//VGJiogYPHqxJkyapZs2aGjRokB555BENHjxY0dHRmj179ik7eV5enrp166bmzZvr4YcfVseOHTVkyBC1aNFCS5cu1bJly9S6dWv99re/1ZAhQ9S1a1d98cUX2r59u3+uvdiKFSuUnJysQ4cO6fbbb1e1atUUCAQUExOjmJgYBQIBVatWTSNGjNChQ4f09NNPlwhPx8vJydFDDz2kO++8U9dff32pNfn5+UpLS5OZadasWWVuKyMjQ1dffXXQuoKCAg0fPlzNmzdXRERE0PvQtWvXoAu6T9z2pEmT1LVrV0nS6tWrddll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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax=(estado.Population/1_000_000).plot.hist(figsize=(4,4))\n",
        "ax.set_label(\"Población [millones]\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "AT2qR1tbp4Xj",
        "outputId": "2e28c80a-9fc2-4e9c-cc88-d254ace18daf"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax=(estado[\"Murder.Rate\"]).plot.hist(figsize=(4,4), color=\"orange\")\n",
        "ax.set_label(\"Tasa de homicidios\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "id": "NqZEtTeOrVJa",
        "outputId": "ee7f2bf3-bb0c-43c1-fd1c-f32b39dcce88"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "analisis=estado.head()\n",
        "g=sns.FacetGrid(analisis, col=\"State\")\n",
        "g.map(sns.distplot,\"Murder.Rate\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6PAdL1j1r-cZ",
        "outputId": "248efded-4c98-4d9f-c35d-e5921dc4520f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  func(*plot_args, **plot_kwargs)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n",
            "  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  func(*plot_args, **plot_kwargs)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n",
            "  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  func(*plot_args, **plot_kwargs)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n",
            "  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  func(*plot_args, **plot_kwargs)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n",
            "  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  func(*plot_args, **plot_kwargs)\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n",
            "  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7ff90b8b2c50>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x300 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}